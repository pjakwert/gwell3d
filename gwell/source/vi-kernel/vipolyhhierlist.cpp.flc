
(fast-lock-cache-data 3 (quote (16735 . 2162)) (quote nil) (quote nil) (quote (t ("^#[ 	]*error[ 	]+\\(.+\\)" (1 font-lock-warning-face prepend)) ("^#[ 	]*\\(import\\|include\\)[ 	]*\\(<[^>\"
]*>?\\)" (2 font-lock-string-face)) ("^#[ 	]*define[ 	]+\\(\\sw+\\)(" (1 font-lock-function-name-face)) ("^#[ 	]*\\(elif\\|if\\)\\>" ("\\<\\(defined\\)\\>[ 	]*(?\\(\\sw+\\)?" nil nil (1 font-lock-builtin-face) (2 font-lock-variable-name-face nil t))) ("^#[ 	]*\\(define\\|e\\(?:l\\(?:if\\|se\\)\\|ndif\\|rror\\)\\|file\\|i\\(?:f\\(?:n?def\\)?\\|nclude\\)\\|line\\|pragma\\|undef\\)\\>[ 	!]*\\(\\sw+\\)?" (1 font-lock-builtin-face) (2 font-lock-variable-name-face nil t)) ("^\\(\\sw+\\)\\>\\([ 	]*<\\([^>
]+\\)[ 	*&]*>\\)?\\([ 	]*::[ 	*~]*\\(\\sw+\\)\\)*[ 	]*(" (1 (if (or (match-beginning 2) (match-beginning 4)) font-lock-type-face font-lock-function-name-face)) (3 font-lock-type-face nil t) (5 font-lock-function-name-face nil t)) ("\\<\\(bool\\|c\\(?:har\\|omplex\\)\\|double\\|float\\|int\\|long\\|s\\(?:hort\\|igned\\)\\|\\(?:unsigne\\|voi\\)d\\|\\sw+_t\\|\\([iof]\\|str\\)+stream\\(buf\\)?\\|ios\\|string\\|rope\\|list\\|slist\\|deque\\|vector\\|bit_vector\\|set\\|multiset\\|map\\|multimap\\|hash\\(_\\(m\\(ap\\|ulti\\(map\\|set\\)\\)\\|set\\)\\)?\\|stack\\|queue\\|priority_queue\\|type_info\\|iterator\\|const_iterator\\|reverse_iterator\\|const_reverse_iterator\\|reference\\|const_reference\\)\\>" (0 font-lock-type-face)) ("\\<\\(operator\\)\\>[ 	]*\\(!=\\|%=\\|&[&=]\\|()\\|\\*=\\|\\+[+=]\\|-\\(?:>\\*\\|[=>-]\\)\\|/=\\|<\\(?:<=\\|[<=]\\)\\|==\\|>\\(?:>=\\|[=>]\\)\\|\\[\\]\\|\\^=\\||[=|]\\|[!%&*+,/<=>|~^-]\\)?" (1 font-lock-keyword-face) (2 font-lock-builtin-face nil t)) ("\\<\\(case\\|goto\\)\\>" (1 font-lock-keyword-face) ("\\(-[0-9]+\\|\\sw+\\)[ 	]*\\(::\\)?" (save-excursion (while (progn (skip-chars-forward "^:
") (looking-at "::")) (forward-char 2)) (point)) nil (1 (if (match-beginning 2) font-lock-type-face font-lock-constant-face) nil t))) (":" ("^[ 	]*\\(\\sw+\\)[ 	]*:\\($\\|[^:]\\)" (beginning-of-line) (end-of-line) (1 font-lock-constant-face))) ("\\<\\(a\\(?:nd\\(?:_eq\\)?\\|sm\\|uto\\)\\|b\\(?:it\\(?:and\\|or\\)\\|reak\\)\\|c\\(?:atch\\|o\\(?:mpl\\|n\\(?:st\\|tinue\\)\\)\\)\\|d\\(?:elete\\|o\\)\\|e\\(?:lse\\|x\\(?:p\\(?:\\(?:lici\\|or\\)t\\)\\|tern\\)\\)\\|f\\(?:or\\|riend\\)\\|i\\(?:f\\|nline\\)\\|mutable\\|n\\(?:ew\\|ot\\(?:_eq\\)?\\)\\|or\\(?:_eq\\)?\\|re\\(?:gister\\|turn\\)\\|s\\(?:izeof\\|tatic\\|witch\\)\\|t\\(?:emplate\\|h\\(?:is\\|row\\)\\|ry\\|ype\\(?:def\\|id\\)\\)\\|v\\(?:irtual\\|olatile\\)\\|while\\|xor\\(?:_eq\\)?\\|\\(c\\(?:lass\\|onst_cast\\)\\|dynamic_cast\\|enum\\|namespace\\|p\\(?:r\\(?:ivate\\|otected\\)\\|ublic\\)\\|reinterpret_cast\\|st\\(?:\\(?:atic_cas\\|ruc\\)t\\)\\|typename\\|u\\(?:nion\\|sing\\)\\)\\)\\>" (0 font-lock-keyword-face)) ("\\<\\(false\\|true\\)\\>" (0 font-lock-constant-face)))) (quote ((font-lock-constant-face 28125 28130 26027 26032 4608 4612) (font-lock-function-name-face 3943 3958) (font-lock-type-face 28080 28083 28053 28056 28016 28020 27992 27995 27969 27973 27964 27967 27932 27936 27870 27873 25988 25991 25961 25964 25924 25928 25901 25905 25869 25873 25810 25813 24156 24159 24077 24080 23995 23998 23934 23937 23881 23884 21893 21896 21811 21814 21748 21751 21698 21701 21638 21641 21199 21202 21093 21096 20952 20955 20798 20801 20721 20724 20433 20436 20394 20397 20364 20368 20335 20338 20327 20331 20294 20297 20246 20249 18771 18774 17953 17956 16630 16633 15743 15746 14775 14778 13762 13765 12546 12550 12184 12188 11567 11571 11031 11035 10785 10789 10478 10482 10422 10426 10017 10021 9970 9974 9804 9808 9762 9766 9340 9344 9291 9295 8572 8576 8544 8548 7519 7523 7475 7479 6596 6600 6532 6535 6481 6485 5821 5824 5812 5820 5620 5627 5541 5545 5159 5163 4820 4823 4811 4819 4769 4773 4563 4566 4554 4562 4315 4319 4257 4263 4116 4119 4107 4115 4067 4071 3959 3963 3926 3941 3791 3795 3343 3347 2575 2579 2425 2429) (font-lock-keyword-face 28468 28474 28424 28428 28411 28413 28393 28399 28228 28230 28135 28138 28104 28108 28092 28094 26358 26364 26320 26324 26307 26309 26289 26295 26130 26132 26037 26040 26012 26016 26000 26002 24527 24533 24509 24515 24430 24432 24336 24339 24318 24324 24291 24295 24257 24259 24210 24212 24168 24170 24057 24062 23986 23991 22237 22243 22221 22227 22155 22157 22064 22067 22048 22054 22025 22029 21991 21993 21945 21947 21904 21906 21784 21789 21735 21740 21620 21626 21590 21594 21552 21558 21540 21542 21519 21525 21445 21447 21427 21433 21385 21390 21353 21355 21278 21283 21256 21259 21210 21212 21135 21140 21049 21054 20894 20899 20822 20827 20705 20711 20687 20693 20625 20627 20609 20615 20578 20583 20546 20548 20469 20474 20447 20450 20423 20428 20318 20323 18902 18908 18893 18897 18845 18851 18833 18835 18268 18274 18232 18238 18220 18222 18157 18163 18095 18097 18082 18088 18061 18063 18048 18054 18007 18009 17214 17220 17063 17066 17054 17058 17039 17044 17013 17018 16975 16980 16933 16937 16926 16931 16882 16888 16816 16822 16765 16771 16749 16751 16713 16718 16687 16692 15997 16003 15935 15941 15919 15921 15883 15888 15855 15861 15826 15828 15796 15801 15234 15240 15105 15111 15057 15059 15037 15042 14978 14982 14963 14968 14905 14911 14844 14846 14834 14839 14266 14272 14250 14256 14221 14223 14030 14035 13983 13989 13954 13956 13946 13950 13931 13936 13873 13879 13826 13828 13816 13821 13206 13212 13147 13152 13123 13129 13032 13034 12935 12937 12917 12923 12865 12867 12848 12854 12814 12816 12789 12793 12774 12779 12696 12702 12651 12653 12613 12618 12551 12556 12392 12398 12343 12349 12264 12266 12254 12259 12189 12194 12165 12171 12125 12130 12110 12116 12060 12062 12051 12053 12038 12044 12003 12005 11839 11845 11824 11830 11792 11794 11737 11739 11698 11700 11689 11693 11674 11679 11648 11653 11572 11577 11464 11469 11432 11438 11412 11418 11360 11362 11330 11335 11297 11302 11289 11293 11274 11279 11249 11253 11242 11248 11197 11199 11187 11192 11147 11152 11082 11087 11011 11017 10991 10997 10959 10961 10883 10888 10862 10865 10852 10857 10790 10795 10686 10691 10506 10509 9916 9922 9891 9893 7663 7669 7638 7640 6193 6199 6118 6123 6043 6049 5938 5940 5876 5881 5218 5223 5147 5151 4971 4973 4940 4945 4874 4879 4549 4552 4381 4386 4320 4325 4246 4251 4184 4189 3964 3969 3892 3897 3833 3838 3624 3629 3565 3567 3462 3467 3386 3391 3270 3275 3233 3238 3212 3216 3127 3135 3059 3063 3043 3051 2955 2959 2939 2947 2838 2842 2716 2719 2612 2617 745 754 739 744 724 733 718 723) (font-lock-string-face 6013 6017 5393 5397 5356 5360 5328 5332 5293 5297 5270 5274 5044 5049 4758 4762 4539 4543 4486 4490 3064 3067 3029 3032 2992 2995 2960 2963 2889 2892 2843 2846 2826 2829 2804 2807 2784 2787 698 715 673 688 650 663 624 640 598 614 572 588 545 562 517 535 487 507 463 477 437 453 418 427) (font-lock-comment-face 28481 28631 26375 27869 24544 25809 22254 23880 18919 20245 18283 18770 17233 17952 16010 16629 15251 15742 14281 14774 13231 13761 12427 12546 10186 10421 9485 9761 8610 9290 7716 8543 6824 7474 6478 6481 6425 6473 6374 6420 6299 6369 6221 6294 2849 2862 1950 2424 973 1942 822 972 48 405) (font-lock-variable-name-face 25 39 8 16) (font-lock-builtin-face 690 697 665 672 642 649 616 623 590 597 564 571 537 544 509 516 479 486 455 462 429 436 410 417 41 46 18 24 2 7))))
